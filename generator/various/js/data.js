营销号生成器.输入框 = {
	主体: "桃核",
	事件: "不能吞下去",
	另一种说法: "桃核太大了，吞下去容易噎着"
};
营销号生成器.结果 = 此 => `
	${此.主体}${此.事件}是怎么回事呢？${此.主体}相信大家都很熟悉，但是${此.主体}${此.事件}是怎么回事呢，下面就让小编带大家一起了解吧。
	${此.主体}${此.事件}，其实就是${此.另一种说法}，大家可能会很惊讶${此.主体}怎么会${此.事件}呢？但事实就是这样，小编也感到非常惊讶。
	这就是关于${此.主体}${此.事件}的事情了，大家有什么想法呢，欢迎在评论区告诉小编一起讨论哦！
`.掐头去尾();
营销号生成器.简介 = `
	营销号文案生成器是最近网络上面挺火的一款恶搞神器，也叫“营销号生成器”、“营销号文章生成器”。营销号文案生成器可以一键生成一段文字，逻辑不通，道理不通，就是一堆无厘头的垃圾话，非常适合营销号写推文。
	这个工具的玩法很简单，只需要用户输入事件，名字，原因（另一种说法），就可以自动模拟出各种文不对题的文章。虽然这些文章看起来没什么营养，看起来非常沙雕，但网友们玩得不亦乐乎。单纯用来搞笑、写骚话热评等还是不错的。
	当评论区出现类似这样的评论时，人们总会不亦乐乎地回复一句：“老营销号了（狗头）。”
`.掐头去尾();

明哥体生成器.输入框 = {
	语言: "jQuery"
}
明哥体生成器.结果 = 此 => {
	var 语言 = (此.语言.toLowerCase() == "jquery" ? "JS" : 此.语言);
	return `
		老实说我从来没用过${此.语言}，正因为我反感${此.语言}。 为什么我反感，因为我完全有开发${此.语言}的能力，${此.语言}的底层我都了如指掌。
		虽说我反感${此.语言}，但是${此.语言}却占有大量的用户份额，之后我有个想法，不如重新开发一个属于自己思想，自己架构的${此.语言}。
		我给了他一个霸气的名字：MingGe${语言}，
		它的名字叫MingGe${语言}，MingGe就是我的大名， 一看到MingGe${语言}名字，就知道作者是我，知道它是国产的，让别人知道国产${此.语言}一样做得很出色，出众！
		我是mingge，请支持国产mingge${语言}，因为我们都是中国人。
	`.掐头去尾();
}
明哥体生成器.简介 = `
	强大的minggeJS，你会JQUERY你也会用minggeJS,语法是一样的！但是minggeJS比JQUERY还要强大，文件小，选择器的效率 在JQUERY和ZEPTO以上，超强的CSS3动画 JQUERY有的功能，minggeJS都有基本上有，压缩后只有15K大。
	（一本正经地讽刺） 强大的minggePhone，你会iPhone你也会用minggePhone,语法是一样的！但是minggePhone比iPhone还要强大，文件小，选择器的效率 在iPhone和iPad以上，超强的MinggeOS系统！iPhone有的功能，minggePhone都有基本上有，压缩后只有15K大。
`.掐头去尾();

狗屁不通文章生成器.输入框 = {
	主题: "一天掉多少根头发",
	章节长度: 600/* ,
	随机种子: "随机" */
}
狗屁不通文章生成器.结果 = 此 => 狗屁不通文章生成(此.主题, 此.章节长度/* , 此.随机种子 */);
狗屁不通文章生成器.简介 = `
	狗屁不通文章生成器，就是你随便输入一个主题，然后这个生成器可以根据你输入主题的文字，生成一篇文章。当然了，这个狗屁不通文章生成器，现在还不太智能，之所以火了，就是因为它不算太智能（因为作者应该不太懂神经网络算法，所以没有加入任何自然语言处理的算法），生成的文章都啰里啰嗦，内容重复，乱七八糟，所以大家感觉好玩就火了。
	本工具生成的文章真的狗屁不通，只能拿来搞笑，请不要用于正规用途！
`.掐头去尾();

笑话生成器.输入框 = {
	姓名: "李雷",
	单位: ["公制", "美制"]
};
笑话生成器.结果 = 此 => {
	var 主人公 = ["怪兽威利", "大老爹", "圣诞老人"].随机给个(),
		地点 = ["肯德基", "迪士尼乐园", "白宫"].随机给个(),
		事件 = ["自燃了", "在人行道化成了一坨泥", "变成一只鼻涕虫爬走了"].随机给个(),
		温度 = 35,
		体重 = 140,
		温度单位 = "摄氏度",
		体重单位 = "公斤";
	if (此.单位 == "美制") {
		体重 = Math.round(体重 * 2.20462);
		温度 = Math.round(温度 * 9 / 5 + 32);
		温度单位 = "华氏度";
		体重单位 = "磅";
	}
	return `今天气温 ${温度} ${温度单位}，${主人公}出门散步。当走到${地点}门前时，突然就${事件}。人们都惊呆了，${此.姓名}全程目睹但并没有慌，因为${主人公}是一个 ${体重} ${体重单位}的胖子，天气又辣么热。`;
}
笑话生成器.简介 = `
	本节是一个小测验，要求你运用所学知识制作一个笑话生成器。祝玩的愉快！
	这项评估中，你将运用你在这个版块的文章中学到的知识，构建一个生成随机笑话的好玩 app。玩得开心！
	我们提供了一些原始的 HTML / CSS，以及若干字符串和 JavaScript 函数，还需要你来编写一些 JavaScript 代码让项目运行起来：
	点击“随机生成笑话”按钮时生成一则笑话。
	若“生成”按钮按下之前，你在“输入自定义的名字”文字框中输入了一个自定义名字，那么生成的笑话中原有的名字（李雷 / Bob）将被取代。
	通过选择国家名称的单选按钮来确定界面语言以及笑话中温度和重量的制式。
	点一次按钮，生成一个新故事。点一次生成一个……
`.掐头去尾();

乱数假文生成器.输入框 = {
	文本语言: ["简体中文", "繁体中文", "英文"],
	文本字数: 500,
	包含标点: true,
	段落数量: 5
}
乱数假文生成器.结果 = 此 => {
	/* if (此.文本语言 === "英文") return new Promise((resolve, reject) => {
		$.get("https://www.atoolbox.net/Api/GetLoremIpsum.php?p=" + 此.段落数量, data => resolve(data));
	}); */
	if (此.文本语言 === "英文") return loremIpsumParagraph(此.段落数量);
	else return loremIpsum(此.文本语言 === "繁体中文" ? "tc" : "cn", 此.包含标点, 此.文本字数);
}
乱数假文生成器.简介 = `
	乱数假文，英文又称“Lorem ipsum”，是指一篇常用于排版设计领域的文章，主要的目的为测试文章或文字在不同字型、版型下看起来的效果，通常网站还没建设好时会出现这段文字。
	乱数假文生成器用来生成一篇用于排版设计领域的随机文章，支持生成英文、简体中文、繁体中文的乱数假文。
	乱数假文相关介绍
	Lorem ipsum从西元15世纪开始就被广泛地使用在西方的印刷、设计领域中，在电脑排版盛行之后，这段被传统印刷产业使用几百年的无意义文字又再度流行。由于这段文字以“Lorem ipsum”起头，并且常被用于标题的测试中，所以一般称为Lorem ipsum，简称为Lipsum。
	网站没有建设完时，也会出现这样的段落，甚至有些是故意的，包括使用网页制作软件，网页模板等，新建时一般都会出现Lorem ipsum段落
	常见的Lorem ipsum起头如下：
	Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
	原先大家以为这段拉丁文只是没有意义的组合，目的是让阅读者不要被文章内容所影响，而只专注于观察字型或版型，并借此填满空间。但根据美国拉丁学者Richard McClintock的研究，Lorem ipsum原来起源于西塞罗的《善恶之尽》（De finibus bonorum et malorum）：
	Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit…
	（中译：无人爱苦，亦无人寻之欲之，乃因其苦…）
	为了减少Lorem ipsum的可读性，并且让字母出现的频率与现代英语接近，所以有些版本中部分字母被K、W、Z等拉丁文中没有的字母替换，或是加入zzril、takimata等字。除了原始的Lorem ipsum版本外，还有几套新的Lorem ipsum。
`.掐头去尾();

初始化(); //这行放最后不要删掉
