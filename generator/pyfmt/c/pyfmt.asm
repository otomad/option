; Listing generated by Microsoft (R) Optimizing Compiler Version 19.25.28614.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?input@@3PADA					; input
PUBLIC	?sentence@@3PADA				; sentence
PUBLIC	?output@@3PA_WA					; output
PUBLIC	?output_upr@@3PA_WA				; output_upr
PUBLIC	?flag_error@@3HA				; flag_error
_BSS	SEGMENT
?input@@3PADA DB 014H DUP (?)				; input
?sentence@@3PADA DB 064H DUP (?)			; sentence
?output@@3PA_WA DW 014H DUP (?)				; output
?output_upr@@3PA_WA DW 014H DUP (?)			; output_upr
?flag_error@@3HA DD 01H DUP (?)				; flag_error
_BSS	ENDS
msvcjmc	SEGMENT
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__35D7DDB3_corecrt_memory@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__7242C389_ctype@h DB 01H
__90A1F774_basetsd@h DB 01H
__3C23D660_guiddef@h DB 01H
__AF541008_winnt@h DB 01H
__0D001789_processthreadsapi@h DB 01H
__F972325D_memoryapi@h DB 01H
__76CD430D_winerror@h DB 01H
__737D49DB_winbase@h DB 01H
__1B9502AC_winuser@h DB 01H
__376EBCA0_winioctl@h DB 01H
__24E9E95F_stdlib@h DB 01H
__2CCBBE23_propidl@h DB 01H
__AD360DAF_oleauto@h DB 01H
__0396F1A5_stralign@h DB 01H
__47A90C35_vcruntime_new@h DB 01H
__DE6A6409_proj1@cpp DB 01H
msvcjmc	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vfwprintf_l
PUBLIC	wprintf
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	_vfscanf_l
PUBLIC	scanf
PUBLIC	?converse@@YAXXZ				; converse
PUBLIC	main
PUBLIC	__JustMyCode_Default
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0M@PCMGGC@?J?d?H?k?S?P?N?s?$KD?$KB?6@	; `string'
PUBLIC	??_C@_0M@FGMMJMCC@zh?9CN?4UTF?98@		; `string'
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@		; `string'
PUBLIC	??_C@_0BF@CHEIFG@title?5?$LI?q?J?$LN?$LL?$KP?F?$LE?R?t?P?N?J?$LN@ ; `string'
PUBLIC	??_C@_03LCPHGAHP@cls@				; `string'
PUBLIC	??_C@_0FE@PIHDKMP@?$KD?$KI?W?n?$LG?$OA?$LP?I?J?d?H?k?5100?5?W?V?D?$LI?$KD?$KM?F?$LE?R?t?V?$KO?$LM?d@ ; `string'
PUBLIC	??_C@_0N@BIABBOPH@?G?k?J?d?H?k?F?$LE?R?t?$KD?$LK@ ; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0BA@CIHJALIL@?G?k?J?d?H?k?F?$LE?R?t?$KD?$LK?$CFs?6@ ; `string'
PUBLIC	??_C@_0N@DBGLJDHP@?W?$KK?$LL?$LL?$LN?a?$LJ?$PL?N?$KK?$KD?$LK@ ; `string'
PUBLIC	??_C@_05PDJBBECF@pause@				; `string'
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfwprintf:PROC
EXTRN	__imp_putchar:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp___stdio_common_vfscanf:PROC
EXTRN	strlen:PROC
EXTRN	__imp_strlwr:PROC
EXTRN	__imp_strupr:PROC
EXTRN	__imp_mbstowcs:PROC
EXTRN	__imp_system:PROC
EXTRN	__imp_setlocale:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_RTC_UninitUse:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_scanf_options DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$__local_stdio_scanf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfwprintf_l DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$_vfwprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wprintf DD imagerel $LN3
	DD	imagerel $LN3+189
	DD	imagerel $unwind$wprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+189
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfscanf_l DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$_vfscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$scanf DD	imagerel $LN3
	DD	imagerel $LN3+186
	DD	imagerel $unwind$scanf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?converse@@YAXXZ DD imagerel $LN121
	DD	imagerel $LN121+3973
	DD	imagerel $unwind$?converse@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN11
	DD	imagerel $LN11+449
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_05PDJBBECF@pause@
CONST	SEGMENT
??_C@_05PDJBBECF@pause@ DB 'pause', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DBGLJDHP@?W?$KK?$LL?$LL?$LN?a?$LJ?$PL?N?$KK?$KD?$LK@
CONST	SEGMENT
??_C@_0N@DBGLJDHP@?W?$KK?$LL?$LL?$LN?a?$LJ?$PL?N?$KK?$KD?$LK@ DB 0d7H, 0aaH
	DB	0bbH, 0bbH, 0bdH, 0e1H, 0b9H, 0fbH, 0ceH, 0aaH, 0a3H, 0baH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CIHJALIL@?G?k?J?d?H?k?F?$LE?R?t?$KD?$LK?$CFs?6@
CONST	SEGMENT
??_C@_0BA@CIHJALIL@?G?k?J?d?H?k?F?$LE?R?t?$KD?$LK?$CFs?6@ DB 0c7H, 0ebH, 0caH
	DB	0e4H, 0c8H, 0ebH, 0c6H, 0b4H, 0d2H, 0f4H, 0a3H, 0baH, '%s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BIABBOPH@?G?k?J?d?H?k?F?$LE?R?t?$KD?$LK@
CONST	SEGMENT
??_C@_0N@BIABBOPH@?G?k?J?d?H?k?F?$LE?R?t?$KD?$LK@ DB 0c7H, 0ebH, 0caH, 0e4H
	DB	0c8H, 0ebH, 0c6H, 0b4H, 0d2H, 0f4H, 0a3H, 0baH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FE@PIHDKMP@?$KD?$KI?W?n?$LG?$OA?$LP?I?J?d?H?k?5100?5?W?V?D?$LI?$KD?$KM?F?$LE?R?t?V?$KO?$LM?d@
CONST	SEGMENT
??_C@_0FE@PIHDKMP@?$KD?$KI?W?n?$LG?$OA?$LP?I?J?d?H?k?5100?5?W?V?D?$LI?$KD?$KM?F?$LE?R?t?V?$KO?$LM?d@ DB 0a3H
	DB	0a8H, 0d7H, 0eeH, 0b6H, 0e0H, 0bfH, 0c9H, 0caH, 0e4H, 0c8H, 0ebH
	DB	' 100 ', 0d7H, 0d6H, 0c4H, 0b8H, 0a3H, 0acH, 0c6H, 0b4H, 0d2H, 0f4H
	DB	0d6H, 0aeH, 0bcH, 0e4H, 0d3H, 0c3H, 0b8H, 0f4H, 0d2H, 0f4H, 0b7H
	DB	0fbH, 0baH, 0c5H, 0a1H, 0b0H, '''', 0a1H, 0b1H, 0b7H, 0d6H, 0b8H
	DB	0f4H, 0a3H, 0acH, 0c3H, 0bfH, 0b8H, 0f6H, 0c6H, 0b4H, 0d2H, 0f4H
	DB	0d7H, 0eeH, 0b6H, 0e0H, 0bfH, 0c9H, 0caH, 0e4H, 0c8H, 0ebH, ' '
	DB	'20 ', 0d7H, 0d6H, 0c4H, 0b8H, 0a1H, 0a3H, 0a3H, 0a9H, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03LCPHGAHP@cls@
CONST	SEGMENT
??_C@_03LCPHGAHP@cls@ DB 'cls', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CHEIFG@title?5?$LI?q?J?$LN?$LL?$KP?F?$LE?R?t?P?N?J?$LN@
CONST	SEGMENT
??_C@_0BF@CHEIFG@title?5?$LI?q?J?$LN?$LL?$KP?F?$LE?R?t?P?N?J?$LN@ DB 'tit'
	DB	'le ', 0b8H, 0f1H, 0caH, 0bdH, 0bbH, 0afH, 0c6H, 0b4H, 0d2H, 0f4H
	DB	0d0H, 0ceH, 0caH, 0bdH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@ DB '%', 00H, 'l', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FGMMJMCC@zh?9CN?4UTF?98@
CONST	SEGMENT
??_C@_0M@FGMMJMCC@zh?9CN?4UTF?98@ DB 'zh-CN.UTF-8', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PCMGGC@?J?d?H?k?S?P?N?s?$KD?$KB?6@
CONST	SEGMENT
??_C@_0M@PCMGGC@?J?d?H?k?S?P?N?s?$KD?$KB?6@ DB 0caH, 0e4H, 0c8H, 0ebH, 0d3H
	DB	0d0H, 0ceH, 0f3H, 0a3H, 0a1H, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	025051e01H
	DD	010a230fH
	DD	07003002dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?converse@@YAXXZ DD 025051e01H
	DD	010a230fH
	DD	070030055H
	DD	05002H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?converse@@YAXXZ$rtcName$0 DB 06cH			; converse
	DB	061H
	DB	074H
	DB	069H
	DB	06eH
	DB	00H
	ORG $+2
?converse@@YAXXZ$rtcName$1 DB 06cH			; converse
	DB	061H
	DB	074H
	DB	069H
	DB	06eH
	DB	05fH
	DB	075H
	DB	070H
	DB	072H
	DB	00H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$scanf DD 025054a19H
	DD	011d2322H
	DD	070160029H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
scanf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
scanf$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:scanf$rtcName$0
	ORG $+48
scanf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:scanf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfscanf_l DD 035053901H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 025054a19H
	DD	011d2322H
	DD	070160029H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 035053901H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wprintf DD 025054a19H
	DD	011d2322H
	DD	070160029H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
wprintf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
wprintf$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:wprintf$rtcName$0
	ORG $+48
wprintf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:wprintf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfwprintf_l DD 035053901H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_scanf_options DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 025051e01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Impress\source\repos\Project1\proj1.cpp
;	COMDAT main
_TEXT	SEGMENT
l$ = 4
hint$ = 36
i$1 = 68
$T2 = 296
main	PROC						; COMDAT

; 145  : {

$LN11:
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__DE6A6409_proj1@cpp
	call	__CheckForDebuggerJustMyCode
$begin$12:

; 146  : begin:
; 147  : 	int l, hint = 0;

	mov	DWORD PTR hint$[rbp], 0

; 148  : 	flag_error = 0;

	mov	DWORD PTR ?flag_error@@3HA, 0		; flag_error

; 149  : 	system("title 格式化拼音形式");

	lea	rcx, OFFSET FLAT:??_C@_0BF@CHEIFG@title?5?$LI?q?J?$LN?$LL?$KP?F?$LE?R?t?P?N?J?$LN@
	call	QWORD PTR __imp_system

; 150  : 	system("cls");

	lea	rcx, OFFSET FLAT:??_C@_03LCPHGAHP@cls@
	call	QWORD PTR __imp_system

; 151  : 	printf("（最多可输入 100 字母，拼音之间用隔音符号“'”分隔，每个拼音最多可输入 20 字母。）\n");

	lea	rcx, OFFSET FLAT:??_C@_0FE@PIHDKMP@?$KD?$KI?W?n?$LG?$OA?$LP?I?J?d?H?k?5100?5?W?V?D?$LI?$KD?$KM?F?$LE?R?t?V?$KO?$LM?d@
	call	printf

; 152  : 	printf("请输入拼音：");

	lea	rcx, OFFSET FLAT:??_C@_0N@BIABBOPH@?G?k?J?d?H?k?F?$LE?R?t?$KD?$LK@
	call	printf

; 153  : 	scanf("%s", sentence);

	lea	rdx, OFFSET FLAT:?sentence@@3PADA	; sentence
	lea	rcx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	call	scanf

; 154  : 	l = strlen(sentence);

	lea	rcx, OFFSET FLAT:?sentence@@3PADA	; sentence
	call	strlen
	mov	DWORD PTR l$[rbp], eax

; 155  : 	strlwr(sentence);

	lea	rcx, OFFSET FLAT:?sentence@@3PADA	; sentence
	call	QWORD PTR __imp_strlwr

; 156  : 	system("cls");

	lea	rcx, OFFSET FLAT:??_C@_03LCPHGAHP@cls@
	call	QWORD PTR __imp_system

; 157  : 	printf("请输入拼音：%s\n", sentence);

	lea	rdx, OFFSET FLAT:?sentence@@3PADA	; sentence
	lea	rcx, OFFSET FLAT:??_C@_0BA@CIHJALIL@?G?k?J?d?H?k?F?$LE?R?t?$KD?$LK?$CFs?6@
	call	printf

; 158  : 	sentence[l] = '\'';

	movsxd	rax, DWORD PTR l$[rbp]
	lea	rcx, OFFSET FLAT:?sentence@@3PADA	; sentence
	mov	BYTE PTR [rcx+rax], 39			; 00000027H

; 159  : 	printf("转换结果为：");

	lea	rcx, OFFSET FLAT:??_C@_0N@DBGLJDHP@?W?$KK?$LL?$LL?$LN?a?$LJ?$PL?N?$KK?$KD?$LK@
	call	printf

; 160  : 	for (int i = 0; i <= l; i++)

	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@main
$LN2@main:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@main:
	mov	eax, DWORD PTR l$[rbp]
	cmp	DWORD PTR i$1[rbp], eax
	jg	$LN3@main

; 161  : 	{
; 162  : 		if (sentence[i] != '\'') { input[i - hint] = sentence[i]; continue; }

	movsxd	rax, DWORD PTR i$1[rbp]
	lea	rcx, OFFSET FLAT:?sentence@@3PADA	; sentence
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 39					; 00000027H
	je	SHORT $LN5@main
	movsxd	rax, DWORD PTR i$1[rbp]
	lea	rcx, OFFSET FLAT:?sentence@@3PADA	; sentence
	mov	edx, DWORD PTR hint$[rbp]
	mov	r8d, DWORD PTR i$1[rbp]
	sub	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	lea	r8, OFFSET FLAT:?input@@3PADA		; input
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR [r8+rdx], al
	jmp	SHORT $LN2@main
$LN5@main:

; 163  : 		input[i - hint] = '\0';

	mov	eax, DWORD PTR hint$[rbp]
	mov	ecx, DWORD PTR i$1[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cdqe
	mov	QWORD PTR $T2[rbp], rax
	cmp	QWORD PTR $T2[rbp], 20
	jae	SHORT $LN9@main
	jmp	SHORT $LN10@main
$LN9@main:
	call	__report_rangecheckfailure
$LN10@main:
	lea	rax, OFFSET FLAT:?input@@3PADA		; input
	mov	rcx, QWORD PTR $T2[rbp]
	mov	BYTE PTR [rax+rcx], 0

; 164  : 		converse();

	call	?converse@@YAXXZ			; converse

; 165  : 		if (flag_error == 1) goto begin;

	cmp	DWORD PTR ?flag_error@@3HA, 1		; flag_error
	jne	SHORT $LN6@main
	jmp	$begin$12
$LN6@main:

; 166  : 		if (i != l) putchar('\'');

	mov	eax, DWORD PTR l$[rbp]
	cmp	DWORD PTR i$1[rbp], eax
	je	SHORT $LN7@main
	mov	ecx, 39					; 00000027H
	call	QWORD PTR __imp_putchar
$LN7@main:

; 167  : 		hint = i + 1;

	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR hint$[rbp], eax

; 168  : 	}

	jmp	$LN2@main
$LN3@main:

; 169  : 	putchar('\n');

	mov	ecx, 10
	call	QWORD PTR __imp_putchar

; 170  : 	system("pause");

	lea	rcx, OFFSET FLAT:??_C@_05PDJBBECF@pause@
	call	QWORD PTR __imp_system

; 171  : 	return 0;

	xor	eax, eax
$LN8@main:

; 172  : }

	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Impress\source\repos\Project1\proj1.cpp
;	COMDAT ?converse@@YAXXZ
_TEXT	SEGMENT
latin$ = 4
latin_upr$ = 36
combine$ = 68
l$ = 100
tone$ = 132
i$ = 164
flag$ = 196
j$3 = 228
j$4 = 260
j$5 = 292
$T6 = 520
$T7 = 552
$T8 = 580
$T9 = 612
?converse@@YAXXZ PROC					; converse, COMDAT

; 11   : {

$LN121:
	push	rbp
	push	rdi
	sub	rsp, 680				; 000002a8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 170				; 000000aaH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	BYTE PTR $T9[rbp], 0
	mov	BYTE PTR $T8[rbp], 0
	lea	rcx, OFFSET FLAT:__DE6A6409_proj1@cpp
	call	__CheckForDebuggerJustMyCode

; 12   : 	wchar_t latin, latin_upr, combine = L'#';

	mov	eax, 35					; 00000023H
	mov	WORD PTR combine$[rbp], ax

; 13   : 	int l, tone, i, flag = 0;

	mov	DWORD PTR flag$[rbp], 0

; 14   : 	input[19] = '\0';

	mov	eax, 1
	imul	rax, rax, 19
	mov	QWORD PTR $T6[rbp], rax
	cmp	QWORD PTR $T6[rbp], 20
	jae	SHORT $LN115@converse
	jmp	SHORT $LN116@converse
$LN115@converse:
	call	__report_rangecheckfailure
$LN116@converse:
	lea	rax, OFFSET FLAT:?input@@3PADA		; input
	mov	rcx, QWORD PTR $T6[rbp]
	mov	BYTE PTR [rax+rcx], 0

; 15   : 	l = strlen(input);

	lea	rcx, OFFSET FLAT:?input@@3PADA		; input
	call	strlen
	mov	DWORD PTR l$[rbp], eax

; 16   : 	tone = input[l - 1] - '0';

	mov	eax, DWORD PTR l$[rbp]
	dec	eax
	cdqe
	lea	rcx, OFFSET FLAT:?input@@3PADA		; input
	movsx	eax, BYTE PTR [rcx+rax]
	sub	eax, 48					; 00000030H
	mov	DWORD PTR tone$[rbp], eax

; 17   : 	if (tone < 0 || tone > 5) restart;

	cmp	DWORD PTR tone$[rbp], 0
	jl	SHORT $LN36@converse
	cmp	DWORD PTR tone$[rbp], 5
	jle	SHORT $LN35@converse
$LN36@converse:
	lea	rcx, OFFSET FLAT:??_C@_0M@PCMGGC@?J?d?H?k?S?P?N?s?$KD?$KB?6@
	call	printf
	mov	DWORD PTR ?flag_error@@3HA, 1		; flag_error
	jmp	$LN1@converse
$LN35@converse:

; 18   : 	l--;

	mov	eax, DWORD PTR l$[rbp]
	dec	eax
	mov	DWORD PTR l$[rbp], eax

; 19   : 	for (int j = 0; j < l; j++)

	mov	DWORD PTR j$3[rbp], 0
	jmp	SHORT $LN4@converse
$LN2@converse:
	mov	eax, DWORD PTR j$3[rbp]
	inc	eax
	mov	DWORD PTR j$3[rbp], eax
$LN4@converse:
	mov	eax, DWORD PTR l$[rbp]
	cmp	DWORD PTR j$3[rbp], eax
	jge	SHORT $LN3@converse

; 20   : 		if (!((input[j] >= 'a' && input[j] <= 'z') || input[j] == '^'))

	movsxd	rax, DWORD PTR j$3[rbp]
	lea	rcx, OFFSET FLAT:?input@@3PADA		; input
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN38@converse
	movsxd	rax, DWORD PTR j$3[rbp]
	lea	rcx, OFFSET FLAT:?input@@3PADA		; input
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 122				; 0000007aH
	jle	SHORT $LN37@converse
$LN38@converse:
	movsxd	rax, DWORD PTR j$3[rbp]
	lea	rcx, OFFSET FLAT:?input@@3PADA		; input
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 94					; 0000005eH
	je	SHORT $LN37@converse

; 21   : 			restart;

	lea	rcx, OFFSET FLAT:??_C@_0M@PCMGGC@?J?d?H?k?S?P?N?s?$KD?$KB?6@
	call	printf
	mov	DWORD PTR ?flag_error@@3HA, 1		; flag_error
	jmp	$LN1@converse
$LN37@converse:
	jmp	SHORT $LN2@converse
$LN3@converse:

; 22   : 	for (int j = 0; j < 1; j++)

	mov	DWORD PTR j$4[rbp], 0
	jmp	SHORT $LN7@converse
$LN5@converse:
	mov	eax, DWORD PTR j$4[rbp]
	inc	eax
	mov	DWORD PTR j$4[rbp], eax
$LN7@converse:
	cmp	DWORD PTR j$4[rbp], 1
	jge	$LN6@converse

; 23   : 	{
; 24   : 		for (i = 0; i < l; i++)

	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN10@converse
$LN8@converse:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN10@converse:
	mov	eax, DWORD PTR l$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	$LN9@converse

; 25   : 			if (input[i] == 'a')

	movsxd	rax, DWORD PTR i$[rbp]
	lea	rcx, OFFSET FLAT:?input@@3PADA		; input
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 97					; 00000061H
	jne	$LN39@converse

; 26   : 			{
; 27   : 				if (tone == 1) { latin = L'ā'; latin_upr = L'Ā'; }

	cmp	DWORD PTR tone$[rbp], 1
	jne	SHORT $LN40@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 257				; 00000101H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 256				; 00000100H
	mov	WORD PTR latin_upr$[rbp], ax
$LN40@converse:

; 28   : 				if (tone == 2) { latin = L'á'; latin_upr = L'Á'; }

	cmp	DWORD PTR tone$[rbp], 2
	jne	SHORT $LN41@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 225				; 000000e1H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 193				; 000000c1H
	mov	WORD PTR latin_upr$[rbp], ax
$LN41@converse:

; 29   : 				if (tone == 3) { latin = L'ǎ'; latin_upr = L'Ǎ'; }

	cmp	DWORD PTR tone$[rbp], 3
	jne	SHORT $LN42@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 462				; 000001ceH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 461				; 000001cdH
	mov	WORD PTR latin_upr$[rbp], ax
$LN42@converse:

; 30   : 				if (tone == 4) { latin = L'à'; latin_upr = L'À'; }

	cmp	DWORD PTR tone$[rbp], 4
	jne	SHORT $LN43@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 224				; 000000e0H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 192				; 000000c0H
	mov	WORD PTR latin_upr$[rbp], ax
$LN43@converse:

; 31   : 				if (tone == 5) { latin = L'ȧ'; latin_upr = L'Ȧ'; }

	cmp	DWORD PTR tone$[rbp], 5
	jne	SHORT $LN44@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 551				; 00000227H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 550				; 00000226H
	mov	WORD PTR latin_upr$[rbp], ax
$LN44@converse:

; 32   : 				if (tone == 0) { latin = L'a'; latin_upr = L'A'; }

	cmp	DWORD PTR tone$[rbp], 0
	jne	SHORT $LN45@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 97					; 00000061H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 65					; 00000041H
	mov	WORD PTR latin_upr$[rbp], ax
$LN45@converse:

; 33   : 				flag = 1; break;

	mov	DWORD PTR flag$[rbp], 1
	jmp	SHORT $LN9@converse
$LN39@converse:

; 34   : 			}

	jmp	$LN8@converse
$LN9@converse:

; 35   : 		breag;

	cmp	DWORD PTR flag$[rbp], 1
	jne	SHORT $LN46@converse
	jmp	$LN6@converse
$LN46@converse:

; 36   : 		for (i = 0; i < l; i++)

	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN13@converse
$LN11@converse:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN13@converse:
	mov	eax, DWORD PTR l$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	$LN12@converse

; 37   : 			if (input[i] == 'o')

	movsxd	rax, DWORD PTR i$[rbp]
	lea	rcx, OFFSET FLAT:?input@@3PADA		; input
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 111				; 0000006fH
	jne	$LN47@converse

; 38   : 			{
; 39   : 				if (tone == 1) { latin = L'ō'; latin_upr = L'Ō'; }

	cmp	DWORD PTR tone$[rbp], 1
	jne	SHORT $LN48@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 333				; 0000014dH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 332				; 0000014cH
	mov	WORD PTR latin_upr$[rbp], ax
$LN48@converse:

; 40   : 				if (tone == 2) { latin = L'ó'; latin_upr = L'Ó'; }

	cmp	DWORD PTR tone$[rbp], 2
	jne	SHORT $LN49@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 243				; 000000f3H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 211				; 000000d3H
	mov	WORD PTR latin_upr$[rbp], ax
$LN49@converse:

; 41   : 				if (tone == 3) { latin = L'ǒ'; latin_upr = L'Ǒ'; }

	cmp	DWORD PTR tone$[rbp], 3
	jne	SHORT $LN50@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 466				; 000001d2H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 465				; 000001d1H
	mov	WORD PTR latin_upr$[rbp], ax
$LN50@converse:

; 42   : 				if (tone == 4) { latin = L'ò'; latin_upr = L'Ò'; }

	cmp	DWORD PTR tone$[rbp], 4
	jne	SHORT $LN51@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 242				; 000000f2H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 210				; 000000d2H
	mov	WORD PTR latin_upr$[rbp], ax
$LN51@converse:

; 43   : 				if (tone == 5) { latin = L'ȯ'; latin_upr = L'Ȯ'; }

	cmp	DWORD PTR tone$[rbp], 5
	jne	SHORT $LN52@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 559				; 0000022fH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 558				; 0000022eH
	mov	WORD PTR latin_upr$[rbp], ax
$LN52@converse:

; 44   : 				if (tone == 0) { latin = L'o'; latin_upr = L'O'; }

	cmp	DWORD PTR tone$[rbp], 0
	jne	SHORT $LN53@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 111				; 0000006fH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 79					; 0000004fH
	mov	WORD PTR latin_upr$[rbp], ax
$LN53@converse:

; 45   : 				flag = 1; break;

	mov	DWORD PTR flag$[rbp], 1
	jmp	SHORT $LN12@converse
$LN47@converse:

; 46   : 			}

	jmp	$LN11@converse
$LN12@converse:

; 47   : 		breag;

	cmp	DWORD PTR flag$[rbp], 1
	jne	SHORT $LN54@converse
	jmp	$LN6@converse
$LN54@converse:

; 48   : 		for (i = 0; i < l; i++)

	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN16@converse
$LN14@converse:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN16@converse:
	mov	eax, DWORD PTR l$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	$LN15@converse

; 49   : 			if (input[i] == 'e')

	movsxd	rax, DWORD PTR i$[rbp]
	lea	rcx, OFFSET FLAT:?input@@3PADA		; input
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 101				; 00000065H
	jne	$LN55@converse

; 50   : 			{
; 51   : 				if (input[i + 1] == 'h' || input[i + 1] == '^')

	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?input@@3PADA		; input
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 104				; 00000068H
	je	SHORT $LN57@converse
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?input@@3PADA		; input
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 94					; 0000005eH
	jne	$LN56@converse
$LN57@converse:

; 52   : 				{
; 53   : 					if (tone == 1) { latin = L'ê'; latin_upr = L'Ê'; combine = L'\x304'; }

	cmp	DWORD PTR tone$[rbp], 1
	jne	SHORT $LN58@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 234				; 000000eaH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 202				; 000000caH
	mov	WORD PTR latin_upr$[rbp], ax
	mov	eax, 772				; 00000304H
	mov	WORD PTR combine$[rbp], ax
$LN58@converse:

; 54   : 					if (tone == 2) { latin = L'ế'; latin_upr = L'Ế'; }

	cmp	DWORD PTR tone$[rbp], 2
	jne	SHORT $LN59@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 7871				; 00001ebfH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 7870				; 00001ebeH
	mov	WORD PTR latin_upr$[rbp], ax
$LN59@converse:

; 55   : 					if (tone == 3) { latin = L'ê'; latin_upr = L'Ê'; combine = L'\x30C'; }

	cmp	DWORD PTR tone$[rbp], 3
	jne	SHORT $LN60@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 234				; 000000eaH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 202				; 000000caH
	mov	WORD PTR latin_upr$[rbp], ax
	mov	eax, 780				; 0000030cH
	mov	WORD PTR combine$[rbp], ax
$LN60@converse:

; 56   : 					if (tone == 4) { latin = L'ề'; latin_upr = L'Ề'; }

	cmp	DWORD PTR tone$[rbp], 4
	jne	SHORT $LN61@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 7873				; 00001ec1H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 7872				; 00001ec0H
	mov	WORD PTR latin_upr$[rbp], ax
$LN61@converse:

; 57   : 					if (tone == 5) { latin = L'ê'; latin_upr = L'Ê'; combine = L'\x307'; }

	cmp	DWORD PTR tone$[rbp], 5
	jne	SHORT $LN62@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 234				; 000000eaH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 202				; 000000caH
	mov	WORD PTR latin_upr$[rbp], ax
	mov	eax, 775				; 00000307H
	mov	WORD PTR combine$[rbp], ax
$LN62@converse:

; 58   : 					if (tone == 0) { latin = L'ê'; latin_upr = L'Ê'; }

	cmp	DWORD PTR tone$[rbp], 0
	jne	SHORT $LN63@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 234				; 000000eaH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 202				; 000000caH
	mov	WORD PTR latin_upr$[rbp], ax
$LN63@converse:

; 59   : 					flag = 1; break;

	mov	DWORD PTR flag$[rbp], 1
	jmp	$LN15@converse
$LN56@converse:

; 60   : 				}
; 61   : 				if (tone == 1) { latin = L'ē'; latin_upr = L'Ē'; }

	cmp	DWORD PTR tone$[rbp], 1
	jne	SHORT $LN64@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 275				; 00000113H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 274				; 00000112H
	mov	WORD PTR latin_upr$[rbp], ax
$LN64@converse:

; 62   : 				if (tone == 2) { latin = L'é'; latin_upr = L'É'; }

	cmp	DWORD PTR tone$[rbp], 2
	jne	SHORT $LN65@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 233				; 000000e9H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 201				; 000000c9H
	mov	WORD PTR latin_upr$[rbp], ax
$LN65@converse:

; 63   : 				if (tone == 3) { latin = L'ě'; latin_upr = L'Ě'; }

	cmp	DWORD PTR tone$[rbp], 3
	jne	SHORT $LN66@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 283				; 0000011bH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 282				; 0000011aH
	mov	WORD PTR latin_upr$[rbp], ax
$LN66@converse:

; 64   : 				if (tone == 4) { latin = L'è'; latin_upr = L'È'; }

	cmp	DWORD PTR tone$[rbp], 4
	jne	SHORT $LN67@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 232				; 000000e8H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 200				; 000000c8H
	mov	WORD PTR latin_upr$[rbp], ax
$LN67@converse:

; 65   : 				if (tone == 5) { latin = L'ė'; latin_upr = L'Ė'; }

	cmp	DWORD PTR tone$[rbp], 5
	jne	SHORT $LN68@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 279				; 00000117H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 278				; 00000116H
	mov	WORD PTR latin_upr$[rbp], ax
$LN68@converse:

; 66   : 				if (tone == 0) { latin = L'e'; latin_upr = L'E'; }

	cmp	DWORD PTR tone$[rbp], 0
	jne	SHORT $LN69@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 101				; 00000065H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 69					; 00000045H
	mov	WORD PTR latin_upr$[rbp], ax
$LN69@converse:

; 67   : 				flag = 1; break;

	mov	DWORD PTR flag$[rbp], 1
	jmp	SHORT $LN15@converse
$LN55@converse:

; 68   : 			}

	jmp	$LN14@converse
$LN15@converse:

; 69   : 		breag;

	cmp	DWORD PTR flag$[rbp], 1
	jne	SHORT $LN70@converse
	jmp	$LN6@converse
$LN70@converse:

; 70   : 		for (i = 0; i < l; i++)

	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN19@converse
$LN17@converse:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN19@converse:
	mov	eax, DWORD PTR l$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	$LN18@converse

; 71   : 			if (input[i] == 'i')

	movsxd	rax, DWORD PTR i$[rbp]
	lea	rcx, OFFSET FLAT:?input@@3PADA		; input
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 105				; 00000069H
	jne	$LN71@converse

; 72   : 			{
; 73   : 				if (input[i + 1] == 'u') break;

	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?input@@3PADA		; input
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 117				; 00000075H
	jne	SHORT $LN72@converse
	jmp	$LN18@converse
$LN72@converse:

; 74   : 				if (tone == 1) { latin = L'ī'; latin_upr = L'Ī'; }

	cmp	DWORD PTR tone$[rbp], 1
	jne	SHORT $LN73@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 299				; 0000012bH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 298				; 0000012aH
	mov	WORD PTR latin_upr$[rbp], ax
$LN73@converse:

; 75   : 				if (tone == 2) { latin = L'í'; latin_upr = L'Í'; }

	cmp	DWORD PTR tone$[rbp], 2
	jne	SHORT $LN74@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 237				; 000000edH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 205				; 000000cdH
	mov	WORD PTR latin_upr$[rbp], ax
$LN74@converse:

; 76   : 				if (tone == 3) { latin = L'ǐ'; latin_upr = L'Ǐ'; }

	cmp	DWORD PTR tone$[rbp], 3
	jne	SHORT $LN75@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 464				; 000001d0H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 463				; 000001cfH
	mov	WORD PTR latin_upr$[rbp], ax
$LN75@converse:

; 77   : 				if (tone == 4) { latin = L'ì'; latin_upr = L'Ì'; }

	cmp	DWORD PTR tone$[rbp], 4
	jne	SHORT $LN76@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 236				; 000000ecH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 204				; 000000ccH
	mov	WORD PTR latin_upr$[rbp], ax
$LN76@converse:

; 78   : 				if (tone == 5) { latin = L'ï'; latin_upr = L'Ï'; }

	cmp	DWORD PTR tone$[rbp], 5
	jne	SHORT $LN77@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 239				; 000000efH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 207				; 000000cfH
	mov	WORD PTR latin_upr$[rbp], ax
$LN77@converse:

; 79   : 				if (tone == 0) { latin = L'i'; latin_upr = L'I'; }

	cmp	DWORD PTR tone$[rbp], 0
	jne	SHORT $LN78@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 105				; 00000069H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 73					; 00000049H
	mov	WORD PTR latin_upr$[rbp], ax
$LN78@converse:

; 80   : 				flag = 1; break;

	mov	DWORD PTR flag$[rbp], 1
	jmp	SHORT $LN18@converse
$LN71@converse:

; 81   : 			}

	jmp	$LN17@converse
$LN18@converse:

; 82   : 		breag;

	cmp	DWORD PTR flag$[rbp], 1
	jne	SHORT $LN79@converse
	jmp	$LN6@converse
$LN79@converse:

; 83   : 		for (i = 0; i < l; i++)

	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN22@converse
$LN20@converse:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN22@converse:
	mov	eax, DWORD PTR l$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	$LN21@converse

; 84   : 			if (input[i] == 'u')

	movsxd	rax, DWORD PTR i$[rbp]
	lea	rcx, OFFSET FLAT:?input@@3PADA		; input
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 117				; 00000075H
	jne	$LN80@converse

; 85   : 			{
; 86   : 				if (tone == 1) { latin = L'ū'; latin_upr = L'Ū'; }

	cmp	DWORD PTR tone$[rbp], 1
	jne	SHORT $LN81@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 363				; 0000016bH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 362				; 0000016aH
	mov	WORD PTR latin_upr$[rbp], ax
$LN81@converse:

; 87   : 				if (tone == 2) { latin = L'ú'; latin_upr = L'Ú'; }

	cmp	DWORD PTR tone$[rbp], 2
	jne	SHORT $LN82@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 250				; 000000faH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 218				; 000000daH
	mov	WORD PTR latin_upr$[rbp], ax
$LN82@converse:

; 88   : 				if (tone == 3) { latin = L'ǔ'; latin_upr = L'Ǔ'; }

	cmp	DWORD PTR tone$[rbp], 3
	jne	SHORT $LN83@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 468				; 000001d4H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 467				; 000001d3H
	mov	WORD PTR latin_upr$[rbp], ax
$LN83@converse:

; 89   : 				if (tone == 4) { latin = L'ù'; latin_upr = L'Ù'; }

	cmp	DWORD PTR tone$[rbp], 4
	jne	SHORT $LN84@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 249				; 000000f9H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 217				; 000000d9H
	mov	WORD PTR latin_upr$[rbp], ax
$LN84@converse:

; 90   : 				if (tone == 5) { latin = L'u'; latin_upr = L'U'; combine = L'\x307'; }

	cmp	DWORD PTR tone$[rbp], 5
	jne	SHORT $LN85@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 117				; 00000075H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 85					; 00000055H
	mov	WORD PTR latin_upr$[rbp], ax
	mov	eax, 775				; 00000307H
	mov	WORD PTR combine$[rbp], ax
$LN85@converse:

; 91   : 				if (tone == 0) { latin = L'u'; latin_upr = L'U'; }

	cmp	DWORD PTR tone$[rbp], 0
	jne	SHORT $LN86@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 117				; 00000075H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 85					; 00000055H
	mov	WORD PTR latin_upr$[rbp], ax
$LN86@converse:

; 92   : 				flag = 1; break;

	mov	DWORD PTR flag$[rbp], 1
	jmp	SHORT $LN21@converse
$LN80@converse:

; 93   : 			}

	jmp	$LN20@converse
$LN21@converse:

; 94   : 		breag;

	cmp	DWORD PTR flag$[rbp], 1
	jne	SHORT $LN87@converse
	jmp	$LN6@converse
$LN87@converse:

; 95   : 		for (i = 0; i < l; i++)

	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN25@converse
$LN23@converse:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN25@converse:
	mov	eax, DWORD PTR l$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	$LN24@converse

; 96   : 			if (input[i] == 'v')

	movsxd	rax, DWORD PTR i$[rbp]
	lea	rcx, OFFSET FLAT:?input@@3PADA		; input
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 118				; 00000076H
	jne	$LN88@converse

; 97   : 			{
; 98   : 				if (tone == 1) { latin = L'ǖ'; latin_upr = L'Ǖ'; }

	cmp	DWORD PTR tone$[rbp], 1
	jne	SHORT $LN89@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 470				; 000001d6H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 469				; 000001d5H
	mov	WORD PTR latin_upr$[rbp], ax
$LN89@converse:

; 99   : 				if (tone == 2) { latin = L'ǘ'; latin_upr = L'Ǘ'; }

	cmp	DWORD PTR tone$[rbp], 2
	jne	SHORT $LN90@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 472				; 000001d8H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 471				; 000001d7H
	mov	WORD PTR latin_upr$[rbp], ax
$LN90@converse:

; 100  : 				if (tone == 3) { latin = L'ǚ'; latin_upr = L'Ǚ'; }

	cmp	DWORD PTR tone$[rbp], 3
	jne	SHORT $LN91@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 474				; 000001daH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 473				; 000001d9H
	mov	WORD PTR latin_upr$[rbp], ax
$LN91@converse:

; 101  : 				if (tone == 4) { latin = L'ǜ'; latin_upr = L'Ǜ'; }

	cmp	DWORD PTR tone$[rbp], 4
	jne	SHORT $LN92@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 476				; 000001dcH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 475				; 000001dbH
	mov	WORD PTR latin_upr$[rbp], ax
$LN92@converse:

; 102  : 				if (tone == 5) { latin = L'ü'; latin_upr = L'Ü'; combine = L'\x307'; }

	cmp	DWORD PTR tone$[rbp], 5
	jne	SHORT $LN93@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 252				; 000000fcH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 220				; 000000dcH
	mov	WORD PTR latin_upr$[rbp], ax
	mov	eax, 775				; 00000307H
	mov	WORD PTR combine$[rbp], ax
$LN93@converse:

; 103  : 				if (tone == 0) { latin = L'ü'; latin_upr = L'Ü'; }

	cmp	DWORD PTR tone$[rbp], 0
	jne	SHORT $LN94@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 252				; 000000fcH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 220				; 000000dcH
	mov	WORD PTR latin_upr$[rbp], ax
$LN94@converse:

; 104  : 				flag = 1; break;

	mov	DWORD PTR flag$[rbp], 1
	jmp	SHORT $LN24@converse
$LN88@converse:

; 105  : 			}

	jmp	$LN23@converse
$LN24@converse:

; 106  : 		breag;

	cmp	DWORD PTR flag$[rbp], 1
	jne	SHORT $LN95@converse
	jmp	$LN6@converse
$LN95@converse:

; 107  : 		for (i = 0; i < l; i++)

	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN28@converse
$LN26@converse:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN28@converse:
	mov	eax, DWORD PTR l$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	$LN27@converse

; 108  : 			if (input[i] == 'n')

	movsxd	rax, DWORD PTR i$[rbp]
	lea	rcx, OFFSET FLAT:?input@@3PADA		; input
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 110				; 0000006eH
	jne	$LN96@converse

; 109  : 			{
; 110  : 				if (tone == 1) { latin = L'n'; latin_upr = L'N'; combine = L'\x304'; }

	cmp	DWORD PTR tone$[rbp], 1
	jne	SHORT $LN97@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 110				; 0000006eH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 78					; 0000004eH
	mov	WORD PTR latin_upr$[rbp], ax
	mov	eax, 772				; 00000304H
	mov	WORD PTR combine$[rbp], ax
$LN97@converse:

; 111  : 				if (tone == 2) { latin = L'ń'; latin_upr = L'Ń'; }

	cmp	DWORD PTR tone$[rbp], 2
	jne	SHORT $LN98@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 324				; 00000144H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 323				; 00000143H
	mov	WORD PTR latin_upr$[rbp], ax
$LN98@converse:

; 112  : 				if (tone == 3) { latin = L'ň'; latin_upr = L'Ň'; }

	cmp	DWORD PTR tone$[rbp], 3
	jne	SHORT $LN99@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 328				; 00000148H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 327				; 00000147H
	mov	WORD PTR latin_upr$[rbp], ax
$LN99@converse:

; 113  : 				if (tone == 4) { latin = L'ǹ'; latin_upr = L'Ǹ'; }

	cmp	DWORD PTR tone$[rbp], 4
	jne	SHORT $LN100@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 505				; 000001f9H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 504				; 000001f8H
	mov	WORD PTR latin_upr$[rbp], ax
$LN100@converse:

; 114  : 				if (tone == 5) { latin = L'ṅ'; latin_upr = L'Ṅ'; }

	cmp	DWORD PTR tone$[rbp], 5
	jne	SHORT $LN101@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 7749				; 00001e45H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 7748				; 00001e44H
	mov	WORD PTR latin_upr$[rbp], ax
$LN101@converse:

; 115  : 				if (tone == 0) { latin = L'n'; latin_upr = L'N'; }

	cmp	DWORD PTR tone$[rbp], 0
	jne	SHORT $LN102@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 110				; 0000006eH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 78					; 0000004eH
	mov	WORD PTR latin_upr$[rbp], ax
$LN102@converse:

; 116  : 				flag = 1; break;

	mov	DWORD PTR flag$[rbp], 1
	jmp	SHORT $LN27@converse
$LN96@converse:

; 117  : 			}

	jmp	$LN26@converse
$LN27@converse:

; 118  : 		breag;

	cmp	DWORD PTR flag$[rbp], 1
	jne	SHORT $LN103@converse
	jmp	$LN6@converse
$LN103@converse:

; 119  : 		for (i = 0; i < l; i++)

	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN31@converse
$LN29@converse:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN31@converse:
	mov	eax, DWORD PTR l$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	$LN30@converse

; 120  : 			if (input[i] == 'm')

	movsxd	rax, DWORD PTR i$[rbp]
	lea	rcx, OFFSET FLAT:?input@@3PADA		; input
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 109				; 0000006dH
	jne	$LN104@converse

; 121  : 			{
; 122  : 				if (tone == 1) { latin = L'm'; latin_upr = L'M'; combine = L'\x304'; }

	cmp	DWORD PTR tone$[rbp], 1
	jne	SHORT $LN105@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 109				; 0000006dH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 77					; 0000004dH
	mov	WORD PTR latin_upr$[rbp], ax
	mov	eax, 772				; 00000304H
	mov	WORD PTR combine$[rbp], ax
$LN105@converse:

; 123  : 				if (tone == 2) { latin = L'ḿ'; latin_upr = L'Ḿ'; }

	cmp	DWORD PTR tone$[rbp], 2
	jne	SHORT $LN106@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 7743				; 00001e3fH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 7742				; 00001e3eH
	mov	WORD PTR latin_upr$[rbp], ax
$LN106@converse:

; 124  : 				if (tone == 3) { latin = L'm'; latin_upr = L'M'; combine = L'\x30C'; }

	cmp	DWORD PTR tone$[rbp], 3
	jne	SHORT $LN107@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 109				; 0000006dH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 77					; 0000004dH
	mov	WORD PTR latin_upr$[rbp], ax
	mov	eax, 780				; 0000030cH
	mov	WORD PTR combine$[rbp], ax
$LN107@converse:

; 125  : 				if (tone == 4) { latin = L'm'; latin_upr = L'M'; combine = L'\x300'; }

	cmp	DWORD PTR tone$[rbp], 4
	jne	SHORT $LN108@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 109				; 0000006dH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 77					; 0000004dH
	mov	WORD PTR latin_upr$[rbp], ax
	mov	eax, 768				; 00000300H
	mov	WORD PTR combine$[rbp], ax
$LN108@converse:

; 126  : 				if (tone == 5) { latin = L'ṁ'; latin_upr = L'Ṁ'; }

	cmp	DWORD PTR tone$[rbp], 5
	jne	SHORT $LN109@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 7745				; 00001e41H
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 7744				; 00001e40H
	mov	WORD PTR latin_upr$[rbp], ax
$LN109@converse:

; 127  : 				if (tone == 0) { latin = L'm'; latin_upr = L'M'; }

	cmp	DWORD PTR tone$[rbp], 0
	jne	SHORT $LN110@converse
	mov	BYTE PTR $T8[rbp], 1
	mov	eax, 109				; 0000006dH
	mov	WORD PTR latin$[rbp], ax
	mov	BYTE PTR $T9[rbp], 1
	mov	eax, 77					; 0000004dH
	mov	WORD PTR latin_upr$[rbp], ax
$LN110@converse:

; 128  : 				flag = 1; break;

	mov	DWORD PTR flag$[rbp], 1
	jmp	SHORT $LN30@converse
$LN104@converse:

; 129  : 			}

	jmp	$LN29@converse
$LN30@converse:

; 130  : 	}

	jmp	$LN5@converse
$LN6@converse:

; 131  : 	input[l] = '\0';

	movsxd	rax, DWORD PTR l$[rbp]
	mov	QWORD PTR $T7[rbp], rax
	cmp	QWORD PTR $T7[rbp], 20
	jae	SHORT $LN117@converse
	jmp	SHORT $LN118@converse
$LN117@converse:
	call	__report_rangecheckfailure
$LN118@converse:
	lea	rax, OFFSET FLAT:?input@@3PADA		; input
	mov	rcx, QWORD PTR $T7[rbp]
	mov	BYTE PTR [rax+rcx], 0

; 132  : 	if (combine != '#')

	movzx	eax, WORD PTR combine$[rbp]
	cmp	eax, 35					; 00000023H
	je	SHORT $LN111@converse

; 133  : 		for (int j = l; j > i; j--)

	mov	eax, DWORD PTR l$[rbp]
	mov	DWORD PTR j$5[rbp], eax
	jmp	SHORT $LN34@converse
$LN32@converse:
	mov	eax, DWORD PTR j$5[rbp]
	dec	eax
	mov	DWORD PTR j$5[rbp], eax
$LN34@converse:
	mov	eax, DWORD PTR i$[rbp]
	cmp	DWORD PTR j$5[rbp], eax
	jle	SHORT $LN33@converse

; 134  : 			input[j] = input[j - 1];

	mov	eax, DWORD PTR j$5[rbp]
	dec	eax
	cdqe
	lea	rcx, OFFSET FLAT:?input@@3PADA		; input
	movsxd	rdx, DWORD PTR j$5[rbp]
	lea	r8, OFFSET FLAT:?input@@3PADA		; input
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR [r8+rdx], al
	jmp	SHORT $LN32@converse
$LN33@converse:
$LN111@converse:

; 135  : 	setlocale(LC_ALL, "zh-CN.UTF-8");

	lea	rdx, OFFSET FLAT:??_C@_0M@FGMMJMCC@zh?9CN?4UTF?98@
	xor	ecx, ecx
	call	QWORD PTR __imp_setlocale

; 136  : 	mbstowcs(output, input, 20);

	mov	r8d, 20
	lea	rdx, OFFSET FLAT:?input@@3PADA		; input
	lea	rcx, OFFSET FLAT:?output@@3PA_WA	; output
	call	QWORD PTR __imp_mbstowcs

; 137  : 	strupr(input);

	lea	rcx, OFFSET FLAT:?input@@3PADA		; input
	call	QWORD PTR __imp_strupr

; 138  : 	mbstowcs(output_upr, input, 20);

	mov	r8d, 20
	lea	rdx, OFFSET FLAT:?input@@3PADA		; input
	lea	rcx, OFFSET FLAT:?output_upr@@3PA_WA	; output_upr
	call	QWORD PTR __imp_mbstowcs

; 139  : 	if (flag == 1) { output[i] = latin; output_upr[i] = latin_upr; }

	cmp	DWORD PTR flag$[rbp], 1
	jne	SHORT $LN112@converse
	cmp	BYTE PTR $T8[rbp], 0
	jne	SHORT $LN119@converse
	lea	rcx, OFFSET FLAT:?converse@@YAXXZ$rtcName$0
	call	_RTC_UninitUse
$LN119@converse:
	movsxd	rax, DWORD PTR i$[rbp]
	lea	rcx, OFFSET FLAT:?output@@3PA_WA	; output
	movzx	edx, WORD PTR latin$[rbp]
	mov	WORD PTR [rcx+rax*2], dx
	cmp	BYTE PTR $T9[rbp], 0
	jne	SHORT $LN120@converse
	lea	rcx, OFFSET FLAT:?converse@@YAXXZ$rtcName$1
	call	_RTC_UninitUse
$LN120@converse:
	movsxd	rax, DWORD PTR i$[rbp]
	lea	rcx, OFFSET FLAT:?output_upr@@3PA_WA	; output_upr
	movzx	edx, WORD PTR latin_upr$[rbp]
	mov	WORD PTR [rcx+rax*2], dx
$LN112@converse:

; 140  : 	if (combine != '#') { output[i + 1] = combine; output_upr[i + 1] = combine; }

	movzx	eax, WORD PTR combine$[rbp]
	cmp	eax, 35					; 00000023H
	je	SHORT $LN113@converse
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?output@@3PA_WA	; output
	movzx	edx, WORD PTR combine$[rbp]
	mov	WORD PTR [rcx+rax*2], dx
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?output_upr@@3PA_WA	; output_upr
	movzx	edx, WORD PTR combine$[rbp]
	mov	WORD PTR [rcx+rax*2], dx
$LN113@converse:

; 141  : 	wprintf(L"%ls", output);

	lea	rdx, OFFSET FLAT:?output@@3PA_WA	; output
	lea	rcx, OFFSET FLAT:??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
	call	wprintf
$LN1@converse:
$LN114@converse:

; 142  : 	//wprintf(L"大写字母为：%ls\n", output_upr);
; 143  : }

	lea	rsp, QWORD PTR [rbp+648]
	pop	rdi
	pop	rbp
	ret	0
?converse@@YAXXZ ENDP					; converse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT scanf
_TEXT	SEGMENT
_Result$ = 4
_ArgList$ = 40
__$ArrayPad$ = 280
_Format$ = 320
scanf	PROC						; COMDAT

; 1280 :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__AD6A91B7_stdio@h
	call	__CheckForDebuggerJustMyCode

; 1281 :         int _Result;
; 1282 :         va_list _ArgList;
; 1283 :         __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rbp+8]
	mov	QWORD PTR _ArgList$[rbp], rax

; 1284 :         _Result = _vfscanf_l(stdin, _Format, NULL, _ArgList);

	xor	ecx, ecx
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rbp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rbp]
	mov	rcx, rax
	call	_vfscanf_l
	mov	DWORD PTR _Result$[rbp], eax

; 1285 :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rbp], 0

; 1286 :         return _Result;

	mov	eax, DWORD PTR _Result$[rbp]

; 1287 :     }

	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:scanf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
scanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vfscanf_l
_TEXT	SEGMENT
_Stream$ = 224
_Format$ = 232
_Locale$ = 240
_ArgList$ = 248
_vfscanf_l PROC						; COMDAT

; 1062 :     {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__AD6A91B7_stdio@h
	call	__CheckForDebuggerJustMyCode

; 1063 :         return __stdio_common_vfscanf(

	call	__local_stdio_scanf_options
	mov	rcx, QWORD PTR _ArgList$[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rbp]
	mov	r8, QWORD PTR _Format$[rbp]
	mov	rdx, QWORD PTR _Stream$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfscanf

; 1064 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 1065 :             _Stream, _Format, _Locale, _ArgList);
; 1066 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_vfscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 4
_ArgList$ = 40
__$ArrayPad$ = 280
_Format$ = 320
printf	PROC						; COMDAT

; 954  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__AD6A91B7_stdio@h
	call	__CheckForDebuggerJustMyCode

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rbp+8]
	mov	QWORD PTR _ArgList$[rbp], rax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rbp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rbp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rbp], eax

; 959  :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rbp], 0

; 960  :         return _Result;

	mov	eax, DWORD PTR _Result$[rbp]

; 961  :     }

	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:printf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 224
_Format$ = 232
_Locale$ = 240
_ArgList$ = 248
_vfprintf_l PROC					; COMDAT

; 642  :     {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__AD6A91B7_stdio@h
	call	__CheckForDebuggerJustMyCode

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rbp]
	mov	r8, QWORD PTR _Format$[rbp]
	mov	rdx, QWORD PTR _Stream$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 644  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_wstdio.h
;	COMDAT wprintf
_TEXT	SEGMENT
_Result$ = 4
_ArgList$ = 40
__$ArrayPad$ = 280
_Format$ = 320
wprintf	PROC						; COMDAT

; 611  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__101834BA_corecrt_wstdio@h
	call	__CheckForDebuggerJustMyCode

; 612  :         int _Result;
; 613  :         va_list _ArgList;
; 614  :         __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rbp+8]
	mov	QWORD PTR _ArgList$[rbp], rax

; 615  :         _Result = _vfwprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rbp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rbp]
	mov	rcx, rax
	call	_vfwprintf_l
	mov	DWORD PTR _Result$[rbp], eax

; 616  :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rbp], 0

; 617  :         return _Result;

	mov	eax, DWORD PTR _Result$[rbp]

; 618  :     }

	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:wprintf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
wprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_wstdio.h
;	COMDAT _vfwprintf_l
_TEXT	SEGMENT
_Stream$ = 224
_Format$ = 232
_Locale$ = 240
_ArgList$ = 248
_vfwprintf_l PROC					; COMDAT

; 305  :     {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	mov	rdi, rsp
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+280]
	lea	rcx, OFFSET FLAT:__101834BA_corecrt_wstdio@h
	call	__CheckForDebuggerJustMyCode

; 306  :         return __stdio_common_vfwprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rbp]
	mov	r8, QWORD PTR _Format$[rbp]
	mov	rdx, QWORD PTR _Stream$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfwprintf

; 307  :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_vfwprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 96   :     {

$LN3:
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__F66CEB67_corecrt_stdio_config@h
	call	__CheckForDebuggerJustMyCode

; 97   :         static unsigned __int64 _OptionsStorage;
; 98   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 99   :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 86   :     {

$LN3:
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:__F66CEB67_corecrt_stdio_config@h
	call	__CheckForDebuggerJustMyCode

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
